// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var $$Array     = require("bs-platform/lib/js/array.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var React       = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function str(prim) {
  return prim;
}

var component = ReasonReact.reducerComponent("Page");

function change($$event) {
  console.log($$event.target.value);
  return /* Change */Block.__(0, [$$event.target.value]);
}

function keypress($$event) {
  return /* KeyPress */Block.__(1, [$$event.which]);
}

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      return React.createElement("section", undefined, "Tags: ", $$Array.of_list(List.map((function (tag) {
                            return tag;
                          }), self[/* state */2][/* tags */0])), "Current Input: ", self[/* state */2][/* currentInput */1], React.createElement("div", undefined, React.createElement("input", {
                          type: "text",
                          onKeyPress: Curry._1(self[/* reduce */1], keypress),
                          onChange: Curry._1(self[/* reduce */1], change)
                        })));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* tags : :: */[
                "",
                /* [] */0
              ],
              /* currentInput */""
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (action.tag) {
        if (action[0] !== 13) {
          return /* NoUpdate */0;
        } else {
          return /* Update */Block.__(0, [/* record */[
                      /* tags */List.append(state[/* tags */0], /* :: */[
                            state[/* currentInput */1],
                            /* [] */0
                          ]),
                      /* currentInput */""
                    ]]);
        }
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* tags */state[/* tags */0],
                    /* currentInput */action[0]
                  ]]);
      }
    });
  return newrecord;
}

exports.str       = str;
exports.component = component;
exports.change    = change;
exports.keypress  = keypress;
exports.make      = make;
/* component Not a pure module */
